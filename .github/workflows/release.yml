name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'  # タグ（例: v1.0.0）のプッシュ時にトリガー

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'  # ご利用のGoバージョンに合わせて変更してください

      - name: Build binary for ${{ matrix.os }}
        env:
          CGO_ENABLED: 1
          GIN_MODE: release
        run: |
          echo "Building for OS: ${{ matrix.os }}"
          export GOOS=${{ matrix.os }}
          export GOARCH=amd64
          binary_name="NyanQL_${{ matrix.os }}"
          # Windowsの場合は.exeを付与
          if [ "${{ matrix.os }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          go build -o ${binary_name} main.go

      - name: Upload artifact for ${{ matrix.os }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-binary
          path: NyanQL_${{ matrix.os }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux binary artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-binary
          path: artifacts/linux

      - name: Download Darwin binary artifact
        uses: actions/download-artifact@v3
        with:
          name: darwin-binary
          path: artifacts/darwin

      - name: Download Windows binary artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-binary
          path: artifacts/windows

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux/NyanQL_linux
          asset_name: NyanQL_linux
          asset_content_type: application/octet-stream

      - name: Upload Darwin Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/darwin/NyanQL_darwin
          asset_name: NyanQL_darwin
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/NyanQL_windows.exe
          asset_name: NyanQL_windows.exe
          asset_content_type: application/octet-stream
